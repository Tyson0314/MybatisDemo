<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tyson.mapper.RoleMapper">
    <resultMap id="roleMap" type="role">
        <id column="id" property="id" javaType="long" jdbcType="BIGINT"/>
        <result column="role_name" property="roleName" javaType="string" jdbcType="VARCHAR"/>
        <result column="note" property="note" javaType="string" jdbcType="VARCHAR"/>
        <!--定义结果类型处理器标识-->
        <!--<result column="reg_time" jdbcType="VARCHAR" property="regTime" javaType="java.util.Date"
                typeHandler="com.tyson.typeHandler.MyDateTypeHandler"/>-->
        <result column="reg_time" property="regTime" jdbcType="VARCHAR"  javaType="java.util.Date"
                typeHandler="com.tyson.typeHandler.MyDateTypeHandler"/>
        <!--<result column="reg_time" property="regTime" typeHandler="com.tyson.typeHandler.MyDateTypeHandler"/>-->
        <!-- <result column="users" jdbcType="VARCHAR" property="users" javaType="java.util.List"/>-->
    </resultMap>
<!--    <resultMap id="roleMap" type="role">
        <id column="id" property="id" javaType="long" jdbcType="BIGINT"/>
        <result column="role_name" property="roleName" javaType="string" jdbcType="VARCHAR"/>
        &lt;!&ndash;定义结果类型处理器标识&ndash;&gt;
        <result column="note" property="note" typeHandler="com.tyson.typeHandler.MyStringTypeHandler"/>
    </resultMap>-->
    <select id="findRoleByParams1" resultMap="roleMap">
        SELECT id, role_name, note FROM role
        WHERE role_name like concat('%', #{roleName}, '%')
        and note like concat('%', #{note}, '%')
    </select>
    <select id="findRoleByParams2" parameterType="roleParam" resultMap="roleMap">
        SELECT id, role_name, note FROM role
        WHERE role_name like concat('%', #{roleName}, '%')
        and note like concat('%', #{note}, '%')
    </select>
    <!--SQL列的别名与pojo的属性一样，则SQL查询的结果会自动映射到pojo-->
<!--    <select id="getRole" parameterType="long" resultType="role">
        SELECT id, role_name as roleName, note FROM role WHERE id = #{id}
    </select>-->
    <!--使用resultMap进行结果映射, 用typeHandler对note字段进行转化-->
    <select id="getRoleByRoleName" parameterType="string" resultMap="roleMap">
        select id, role_name, note, reg_time from role where 1=1
        <if test="roleName != null and roleName != ''">
            and role_name like concat('%', #{roleName}, '%')
        </if>
    </select>
    <select id="getRoleById" parameterType="long" resultMap="roleMap">
        SELECT id, role_name, note, reg_time FROM role WHERE id = #{id}
    </select>

    <select id="findRoles" parameterType="role" resultMap="roleMap">
        <bind name="roleName_pattern" value="'%' + roleName + '%'"/>
        <bind name="note_pattern" value="'%' + note + '%'"/>
        select id, role_name, note, reg_time from role
        <trim prefix="where" prefixOverrides="and">
            <if test="roleName != null and roleName != ''">
                and role_name like #{roleName_pattern}
            </if>
            <if test="note != null and note != ''">
                and note like #{note_pattern}
            </if>
        </trim>
    </select>
    <select id="findRolesInIds" parameterType="java.util.List" resultMap="roleMap">
        select id, role_name, note, reg_time from role
        <if test="ids != null">
            where id in
            <foreach collection="ids" item="id" open="(" close=")" separator=",">
                #{id}
            </foreach>
        </if>
    </select>


    <!--    <select id="findRoles" parameterType="role" resultMap="roleMap">
            select id, role_name, note, reg_time from role
            <where>
                <if test="roleName != null and roleName != ''">
                    and role_name like concat('%', #{roleName}, '%')
                </if>
                <if test="note != null and note != ''">
                    and note like concat('%', #{note}, '%')
                </if>
            </where>
        </select>-->

<!--    <select id="findRoles" parameterType="role" resultMap="roleMap">
        select id, role_name, note, reg_time from role where 1=1
        <choose>
            <when test="roleName != null and roleName != ''">
                and role_name like concat('%', #{roleName}, '%')
            </when>
            <when test="note != null and note != ''">
                and note like concat('%', #{note}, '%')
            </when>
            <otherwise>
                and id != 1
            </otherwise>
        </choose>
    </select>-->

    <insert id="myInsertRole" parameterType="role">
        <!--order为BEFORE，selectKey语句在insert语句插入之前执行-->
        <selectKey keyProperty="id" resultType="java.lang.Long" order="BEFORE">
            select if(max(id) is null, 1, max(id) + 2) as newId from role
        </selectKey>
        INSERT into role(id, role_name, note) VALUES(#{id}, #{roleName}, #{note})
    </insert>
    <!--useGeneratedKeys：默认false，使MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键
    keyProperty：默认值unset，用于设置getGeneratedKeys方法或selectKey子元素返回值将赋值到哪个属性中-->
    <insert id="insertRoleUseGeneratedKeys" parameterType="role" useGeneratedKeys="true" keyProperty="id">
        INSERT into role(role_name, note) VALUES(#{roleName}, #{note})
    </insert>
    <insert id="insertRole" parameterType="role">
        <!--selectKey会将 SELECT LAST_INSERT_ID()的结果放入到传入的pojo的主键;
        keyProperty 对应的pojo中的主键的属性名;
        order设置为BEFORE，先执行selectKey语句（SELECT LAST_INSERT_ID()），然后执行插入语句；
        order设置为AFTER，先执行插入语句，然后执行selectKey语句；
        SELECT LAST_INSERT_ID()：得到刚insert 进去记录的主键值，只适用与自增主键;
        resultType：主键类型
        -->
        <selectKey keyProperty="id" resultType="java.lang.Long" order="AFTER">
            select LAST_INSERT_ID()
        </selectKey>
        INSERT into role(role_name, note) VALUES(#{roleName}, #{note})
    </insert>
    <insert id="batchInsertRole" parameterType="java.util.List">
        <selectKey keyProperty="id" resultType="java.lang.Long" order="AFTER">
            select LAST_INSERT_ID()
        </selectKey>
        insert into role(role_name, note, reg_time) values
        <!--mapper接口参数没有使用@Param指定参数名称，则collection名称默认为list-->
        <foreach collection="roleList" item="role" separator=",">
            (#{role.roleName}, #{role.note}, #{role.regTime,javaType=Date, jdbcType=VARCHAR})
        </foreach>
    </insert>
<!--
    <insert id="insertRole" parameterType="role">
        INSERT into role(id, role_name, note) VALUES(#{id}, #{roleName}, #{note})
    </insert>
-->
    <!--取regTime值也可以只配置typeHandler，即#{regTime,typeHandler=com.tyson.typeHandler.MyDateTypeHandler}-->
<!--    <insert id="insertRole" parameterType="role">
        INSERT into role(id, role_name, note, reg_time)
        VALUES(#{id}, #{roleName}, #{note}, #{regTime,javaType=Date, jdbcType=VARCHAR})
    </insert>-->
<!--    <insert id="insertRole" parameterType="role">
        INSERT into role(id, role_name, note, reg_time, users)
        VALUES(#{id}, #{roleName}, #{note}, #{regTime, javaType=Date, jdbcType=VARCHAR},
         #{users, javaType=List, jdbcType=VARCHAR})
    </insert>-->
<!--    <update id="updateRole" parameterType="role">
        update role set
        role_name = #{roleName},
        note = #{note}
        where id = #{id}
    </update>-->
    <update id="updateRole" parameterType="role">
        update role
        <set>
            <if test="roleName != null and roleName != ''">
                role_name = #{roleName},
            </if>
            <if test="note != null and note != ''">
                note = #{note},
            </if>
            <if test="regTime != null">
                reg_time = #{regTime}
            </if>
        </set>
        where id = #{id}
    </update>
    <delete id="deleteRole" parameterType="long">
        delete from role where id = #{id}
    </delete>
<!--    <resultMap id="" type="">
        <constructor>
            <idArg column="id" javaType="int"/>
            <arg column="role_name" javaType="string"/>
        </constructor>
        <id/>
        <result/>
        <association property=""/>
        <collection property=""/>
        <discriminator javaType="">
            <case value=""></case>
        </discriminator>
    </resultMap>-->
</mapper>
